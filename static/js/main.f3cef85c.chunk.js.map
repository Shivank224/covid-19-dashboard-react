{"version":3,"sources":["components/Header.js","components/InfoCard.js","components/Table.js","components/LineChart.js","components/ CovidMap.js","components/App.js","index.js"],"names":["Header","countryDetails","handleCountryInput","value","className","name","id","onChange","e","target","map","country","code","InfoCard","title","todaysData","total","onClick","active","isRecovered","numeral","format","Table","tableData","cases","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","scales","xAxes","type","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineChart","useState","setData","useEffect","a","fetch","then","response","json","fetchData","charAt","toUpperCase","slice","length","datasets","backgroundColor","borderColor","casesTypeColors","color","multiplier","recovered","deaths","buildMapData","Circle","center","countryInfo","lat","long","pathOptions","fillColor","fillOpacity","Math","sqrt","Popup","src","flag","alt","CovidMap","zoom","mapData","MapConsumer","setView","TileLayer","url","attribution","App","React","setCountryDetails","covidDataByCountry","setCovidDataByCountry","countryInput","setCountryInput","covidTableData","setCovidTableData","setMapData","lng","setCenter","zoomLevel","setZoomLevel","dataType","setDataType","sortTableData","sort","b","temp","detail","iso2","getCountryInfo","input","dataUrl","countryIso2","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3cef85c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header({ countryDetails, handleCountryInput, value }) {\n  return (\n    <div className=\"header\">\n      <h1 className=\"headerTitle\">Covid-19 Dashboard</h1>\n      <div></div>\n      <select\n        name=\"countries\"\n        id=\"countries\"\n        value={value}\n        onChange={(e) => handleCountryInput(e.target.value)}\n      >\n        <option value=\"worldwide\">Worldwide</option>\n\n        {countryDetails.map((country) => (\n          <option value={country.code}>{country.name} </option>\n        ))}\n      </select> \n    </div>\n  );\n}\n","import React from \"react\";\nimport numeral from \"numeral\";\nexport default function InfoCard({\n  title,\n  todaysData,\n  total,\n  onClick,\n  active,\n  isRecovered,\n}) {\n  return (\n    <div\n      className={`infoCard ${active && \"infoBox--selected\"} ${\n        !isRecovered && \"infoBox--red\"\n      }`}\n      onClick={onClick}\n    >\n      <h2>{title} </h2>\n      <p>{todaysData ? `+${numeral(todaysData).format(\"0.0a\")}` : \"+0\"}</p>\n      <p>{numeral(total).format(\"0.0a\")} in Total</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport numeral from \"numeral\";\n\nfunction Table({ tableData }) {\n  return (\n    <table>\n      <tbody>\n        {tableData.map((country) => (\n          <tr>\n            <td>{country.country}</td>\n            <td>\n              <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 4,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          parser: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    //   console.log(casesType)\n    //   console.log(data)\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nexport default function LineChart({ casesType }) {\n  const [data, setData] = useState({});\n  //    console.log(casesType)\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          // console.table(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      <h3>\n        Worldwide New {casesType.charAt(0).toUpperCase() + casesType.slice(1)}\n      </h3>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor:\n                  casesType === \"recovered\"\n                    ? \"rgba(0,128,0,0.5)\"\n                    : \"rgba(204, 16, 52, 0.5)\",\n                borderColor: casesType === \"recovered\" ? \"green\" : \"red\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  MapContainer as BasicMap,\n  TileLayer,\n  Circle,\n  Popup,\n  MapConsumer,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n  cases: {\n    color: \"red\",\n    multiplier: 800,\n  },\n  recovered: {\n    color: \"green\",\n    multiplier: 1200,\n  },\n  deaths: {\n    color: \"red\",\n    multiplier: 2000,\n  },\n};\nconst buildMapData = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      pathOptions={{\n        color: casesTypeColors[casesType].color,\n        fillColor: casesTypeColors[casesType].color,\n        fillOpacity: 0.4,\n      }}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <img className=\"info-flag\" src={country.countryInfo.flag} alt=\"\" />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0.0a\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0.0a\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0.0a\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n\nexport default function CovidMap({ center, zoom, mapData, casesType }) {\n  return (\n    <BasicMap center={center} zoom={zoom}>\n      <MapConsumer>\n        {(map) => {\n          map.setView(center, zoom);\n          return null;\n        }}\n      </MapConsumer>\n      <TileLayer\n        url=\"https://api.maptiler.com/maps/basic/256/{z}/{x}/{y}.png?key=MnIgzFWylZtVv45BYBLW\"\n        attribution='<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>'\n      ></TileLayer>\n\n      {buildMapData(mapData, casesType)}\n    </BasicMap>\n  );\n}\n","import React from \"react\";\n\nimport \"../styles/global.css\";\nimport Header from \"./Header\";\nimport InfoCard from \"./InfoCard\";\nimport Table from \"./Table\";\nimport LineChart from \"./LineChart\";\nimport CovidMap from \"./ CovidMap\";\nexport default function App() {\n  //states\n\n  const [countryDetails, setCountryDetails] = React.useState([]);\n  const [covidDataByCountry, setCovidDataByCountry] = React.useState({});\n  const [countryInput, setCountryInput] = React.useState(\"worldwide\");\n  const [covidTableData, setCovidTableData] = React.useState([]);\n  const [mapData, setMapData] = React.useState([]);\n  const [center, setCenter] = React.useState({ lat: 0, lng: 0 });\n  const [zoomLevel, setZoomLevel] = React.useState(2);\n  // const [flag, setFlag] = React.useState(\"\");\n  const [dataType, setDataType] = React.useState(\"cases\");\n  const sortTableData = (data) => {\n    let sortedData = [...data];\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n  };\n\n  React.useEffect(() => {\n    const getCountryInfo = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          //  console.table(data);\n          const temp = data.map((detail) => ({\n            name: detail.country,\n            code: detail.countryInfo.iso2,\n            // img: detail.countryInfo.flag,\n          }));\n          // console.table(temp);\n          setCountryDetails(temp);\n          handleCountryInput(\"worldwide\");\n          setCovidTableData(sortTableData(data));\n          setMapData(data);\n        });\n    };\n    getCountryInfo();\n  }, []);\n\n  const handleCountryInput = async (input) => {\n    // console.log(input);\n    const countryIso2 = input;\n    const dataUrl =\n      countryIso2 === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryIso2}`;\n    await fetch(dataUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInput(countryIso2);\n        setCovidDataByCountry(data);\n\n        if (countryIso2 !== \"worldwide\") {\n          setCenter({ lat: data.countryInfo.lat, lng: data.countryInfo.long });\n          setZoomLevel(4);\n        }\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <Header\n        countryDetails={countryDetails}\n        handleCountryInput={handleCountryInput}\n        value={countryInput}\n      />\n      <div className=\"main\">\n        <div className=\"main_left\">\n          <InfoCard\n            title=\"Cases\"\n            todaysData={covidDataByCountry.todayCases}\n            total={covidDataByCountry.cases}\n            active={dataType === \"cases\"}\n            onClick={() => setDataType(\"cases\")}\n          />\n          <InfoCard\n            title=\"Recovered\"\n            todaysData={covidDataByCountry.todayRecovered}\n            total={covidDataByCountry.recovered}\n            active={dataType === \"recovered\"}\n            isRecovered\n            onClick={() => setDataType(\"recovered\")}\n          />\n          <InfoCard\n            title=\"Deaths\"\n            todaysData={covidDataByCountry.todayDeaths}\n            total={covidDataByCountry.deaths}\n            active={dataType === \"deaths\"}\n            onClick={() => setDataType(\"deaths\")}\n          />\n        </div>\n        <div className=\"main_right\">\n          <div className=\"main_right_1\">\n            <div className=\"map\">\n              <CovidMap\n                center={center}\n                zoom={zoomLevel}\n                mapData={mapData}\n                casesType={dataType}\n              ></CovidMap>\n            </div>\n          </div>\n          <div className=\"main_right_2\">\n            <div>\n              <h3 className=\"table_header\">\n                Covid-19 Cases By Country <span className=\"live\">Live</span>\n              </h3>\n              <div className=\"table\">\n                <Table tableData={covidTableData} />\n              </div>\n              <div className=\"chart\">\n                <LineChart casesType={dataType} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}